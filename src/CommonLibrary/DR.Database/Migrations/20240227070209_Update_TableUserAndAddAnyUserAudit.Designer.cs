// <auto-generated />
using System;
using DR.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DR.Database.Migrations
{
    [DbContext(typeof(DrDbContext))]
    [Migration("20240227070209_Update_TableUserAndAddAnyUserAudit")]
    partial class Update_TableUserAndAddAnyUserAudit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DR.Database.Models.GeneralSetting", b =>
                {
                    b.Property<int>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("integer");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.HasKey("Code");

                    b.ToTable("GeneralSetting", "public");

                    b.HasData(
                        new
                        {
                            Code = 101,
                            DefaultValue = "{\"Prefix\":\"SP\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":null}",
                            Description = "Tiền tố mã sản phẩm khi được tạo tự động.",
                            DisplayName = "Tiền tố mã sản phẩm",
                            OrderIndex = 0
                        },
                        new
                        {
                            Code = 112,
                            DefaultValue = "{\"Prefix\":\"DM\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":null}",
                            Description = "Tiền tố mã danh mục khi được tạo tự động.",
                            DisplayName = "Tiền tố mã danh mục",
                            OrderIndex = 1
                        },
                        new
                        {
                            Code = 119,
                            DefaultValue = "{\"Prefix\":\"ThH\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":null}",
                            Description = "Tiền tố mã thương hiệu khi được tạo tự động.",
                            DisplayName = "Tiền tố mã thương hiệu",
                            OrderIndex = 2
                        },
                        new
                        {
                            Code = 102,
                            DefaultValue = "{\"Prefix\":\"KH\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":null}",
                            Description = "Tiền tố mã khách hàng khi được tạo tự động.",
                            DisplayName = "Tiền tố mã khách hàng",
                            OrderIndex = 3
                        },
                        new
                        {
                            Code = 118,
                            DefaultValue = "{\"Prefix\":\"NKH\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":null}",
                            Description = "Tiền tố mã nhóm khách hàng khi được tạo tự động.",
                            DisplayName = "Tiền tố mã nhóm khách hàng",
                            OrderIndex = 4
                        },
                        new
                        {
                            Code = 111,
                            DefaultValue = "{\"Prefix\":\"ĐH\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":1}",
                            Description = "Tiền tố mã đơn hàng khi được tạo tự động.",
                            DisplayName = "Tiền tố mã đơn hàng",
                            OrderIndex = 5
                        },
                        new
                        {
                            Code = 103,
                            DefaultValue = "{\"Prefix\":\"NCC\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":null}",
                            Description = "Tiền tố mã nhà cung cấp khi được tạo tự động.",
                            DisplayName = "Tiền tố mã nhà cung cấp",
                            OrderIndex = 6
                        },
                        new
                        {
                            Code = 105,
                            DefaultValue = "{\"Prefix\":\"K\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":null}",
                            Description = "Tiền tố mã kho khi được tạo tự động.",
                            DisplayName = "Tiền tố mã kho",
                            OrderIndex = 7
                        },
                        new
                        {
                            Code = 107,
                            DefaultValue = "{\"Prefix\":\"NK\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":3}",
                            Description = "Tiền tố mã phiếu nhập kho khi được tạo tự động.",
                            DisplayName = "Tiền tố mã phiếu nhập kho",
                            OrderIndex = 8
                        },
                        new
                        {
                            Code = 108,
                            DefaultValue = "{\"Prefix\":\"XK\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":1}",
                            Description = "Tiền tố mã phiếu xuất kho khi được tạo tự động.",
                            DisplayName = "Tiền tố mã phiếu xuất kho",
                            OrderIndex = 9
                        },
                        new
                        {
                            Code = 109,
                            DefaultValue = "{\"Prefix\":\"CK\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":3}",
                            Description = "Tiền tố mã phiếu chuyển kho khi được tạo tự động.",
                            DisplayName = "Tiền tố mã phiếu chuyển kho",
                            OrderIndex = 10
                        },
                        new
                        {
                            Code = 110,
                            DefaultValue = "{\"Prefix\":\"TH\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":3}",
                            Description = "Tiền tố mã phiếu trả hàng khi được tạo tự động.",
                            DisplayName = "Tiền tố mã phiếu trả hàng",
                            OrderIndex = 11
                        },
                        new
                        {
                            Code = 113,
                            DefaultValue = "{\"Prefix\":\"KK\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":4}",
                            Description = "Tiền tố mã phiếu kiểm kho khi được tạo tự động.",
                            DisplayName = "Tiền tố mã phiếu kiểm kho",
                            OrderIndex = 12
                        },
                        new
                        {
                            Code = 104,
                            DefaultValue = "{\"Prefix\":\"CH\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":null}",
                            Description = "Tiền tố mã cửa hàng khi được tạo tự động",
                            DisplayName = "Tiền tố mã cửa hàng",
                            OrderIndex = 13
                        },
                        new
                        {
                            Code = 106,
                            DefaultValue = "{\"Prefix\":\"PQ\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":null}",
                            Description = "Tiền tố mã phần quyền khi được tạo tự động.",
                            DisplayName = "Tiền tố mã phần quyền",
                            OrderIndex = 14
                        },
                        new
                        {
                            Code = 114,
                            DefaultValue = "{\"Prefix\":\"PTTT\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":null}",
                            Description = "Tiền tố mã phương thức thanh toán khi được tạo tự động.",
                            DisplayName = "Tiền tố mã phương thức thanh toán",
                            OrderIndex = 15
                        },
                        new
                        {
                            Code = 115,
                            DefaultValue = "{\"Hour\":0,\"Day\":false,\"Week\":false,\"Month\":false,\"IsSend\":false,\"Emails\":[]}",
                            Description = "Báo cáo doanh thu ngày/tuần/tháng qua email.",
                            DisplayName = "Báo cáo qua email",
                            OrderIndex = 16
                        },
                        new
                        {
                            Code = 116,
                            DefaultValue = "{\"Prefix\":\"PT\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":1}",
                            Description = "Tiền tố mã phiếu thu khi được tạo tự động.",
                            DisplayName = "Tiền tố mã phiếu thu",
                            OrderIndex = 17
                        },
                        new
                        {
                            Code = 117,
                            DefaultValue = "{\"Prefix\":\"PC\",\"StartNumber\":1,\"IncrNumber\":1,\"IsRandomIncrNumber\":false,\"ResetBy\":1}",
                            Description = "Tiền tố mã phiếu chi khi được tạo tự động.",
                            DisplayName = "Tiền tố mã phiếu chi",
                            OrderIndex = 18
                        },
                        new
                        {
                            Code = 200,
                            DefaultValue = "false",
                            Description = "Tự động cập nhật số lượng xuất khi tạo hoặc sửa đơn hàng.",
                            DisplayName = "Tự động xuất khi tạo đơn hàng",
                            OrderIndex = 19
                        },
                        new
                        {
                            Code = 201,
                            DefaultValue = "{\"ThousandsSeparator\":\",\",\"DecimalSeparator\":\".\",\"NumberDecimalDigitsForQuantity\":1,\"NumberDecimalDigitsForCurrency\":0}",
                            Description = "Định dạng phần nghìn và phần thập phân của số.",
                            DisplayName = "Định dạng số",
                            OrderIndex = 20
                        });
                });

            modelBuilder.Entity("DR.Database.Models.Merchant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApiSecret")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("At")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("ExpiredDate")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Merchant", "public");
                });

            modelBuilder.Entity("DR.Database.Models.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("ClaimName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClaim")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<string>("ParentId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Permission", "public");
                });

            modelBuilder.Entity("DR.Database.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("CreatedDate")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MerchantId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SearchName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.HasIndex("MerchantId", "Code")
                        .IsUnique();

                    b.ToTable("Role", "public");
                });

            modelBuilder.Entity("DR.Database.Models.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("PermissionId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("boolean");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission", "public");
                });

            modelBuilder.Entity("DR.Database.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Commune")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("District")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<long>("LastSession")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("MerchantId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Province")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("SearchName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.HasIndex("RoleId");

                    b.HasIndex("MerchantId", "Username")
                        .IsUnique();

                    b.ToTable("User", "public");
                });

            modelBuilder.Entity("DR.Database.Models.UserAudit", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("DocCode")
                        .HasColumnType("text");

                    b.Property<string>("DocId")
                        .HasColumnType("text");

                    b.Property<int>("DocType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MerchantId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.HasIndex("UserId");

                    b.HasIndex("MerchantId", "UserId");

                    b.ToTable("UserAudit", "public");
                });

            modelBuilder.Entity("TuanVu.Database.Models.MerchantSetting", b =>
                {
                    b.Property<Guid?>("MerchantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("integer");

                    b.Property<long>("Date")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MerchantId", "Code");

                    b.HasIndex("Code");

                    b.ToTable("MerchantSetting", "public");
                });

            modelBuilder.Entity("DR.Database.Models.RolePermission", b =>
                {
                    b.HasOne("DR.Database.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DR.Database.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DR.Database.Models.User", b =>
                {
                    b.HasOne("DR.Database.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DR.Database.Models.UserAudit", b =>
                {
                    b.HasOne("DR.Database.Models.User", "User")
                        .WithMany("UserAudits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TuanVu.Database.Models.MerchantSetting", b =>
                {
                    b.HasOne("DR.Database.Models.GeneralSetting", "GeneralSetting")
                        .WithMany("MerchantSettings")
                        .HasForeignKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralSetting");
                });

            modelBuilder.Entity("DR.Database.Models.GeneralSetting", b =>
                {
                    b.Navigation("MerchantSettings");
                });

            modelBuilder.Entity("DR.Database.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("DR.Database.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DR.Database.Models.User", b =>
                {
                    b.Navigation("UserAudits");
                });
#pragma warning restore 612, 618
        }
    }
}
